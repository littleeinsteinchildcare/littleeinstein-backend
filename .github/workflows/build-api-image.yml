# Build and Push Little Einstein Backend API Image + Deploy to Azure
name: Build API Image and Deploy

# Trigger on main branch commits and manual runs
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: api-image
  AZURE_WEBAPP_NAME: LEC-api-backend  # Your Azure App Service name

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      # Download repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Docker with advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate current timestamp for tagging
      - name: Generate timestamp
        id: timestamp
        run: echo "value=$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      # Generate image tags and metadata
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Timestamp when build actually runs
            type=raw,value=${{ steps.timestamp.outputs.value }}
            # Git commit SHA for tracking
            type=sha,prefix=main-,format=short
            # Build number for CI/CD tracking
            type=raw,value=build-${{ github.run_number }}
          labels: |
            org.opencontainers.image.title=Little Einstein Backend API
            org.opencontainers.image.description=Backend API for Little Einstein Childcare
            org.opencontainers.image.vendor=Little Einstein Childcare
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            build.triggered-by=${{ github.actor }}
            build.timestamp=${{ steps.timestamp.outputs.value }}
            build.run-number=${{ github.run_number }}
            git.commit=${{ github.sha }}
            git.branch=${{ github.ref_name }}

      # Build & push Docker image
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64  # Azure App Service architecture
          cache-from: type=gha     # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.timestamp.outputs.value }}
            VCS_REF=${{ github.sha }}
            VERSION=build-${{ github.run_number }}

      # Login to Azure using Service Principal
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      # Create build summary
      - name: Generate build summary
        run: |
          echo "## ðŸš€ API Build & Deploy Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** #${{ github.run_number }} | **Time:** ${{ steps.timestamp.outputs.value }} | **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed to:** ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deploy Command:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Keep only recent versions to save storage
      - name: Clean up old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'api-image'
          package-type: 'container'
          min-versions-to-keep: 2  # Keep 3 most recent builds
          delete-only-untagged-versions: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}